{"version":3,"sources":["logo.svg","serviceWorker.js","solution/feedback.js","solution/note.js","solution/phonebook.js","solution/phonebookDb.js","services/notes.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ButtonFeedback","props","onClick","text","StatisticMessage","good","bad","neutral","Feedback","useState","setStateGood","setStateBad","setStateNeutral","Note","note","toggleImportance","lable","important","className","content","PhoneBook","name","phonenumber","persons","setPersons","newName","setNewName","newPhoneNumber","setNewPhone","searchName","setNewlist","filterPersons","setFilterPersons","value","onChange","event","target","result","filter","person","toLowerCase","includes","onSubmit","preventDefault","nameObj","find","alert","concat","type","length","map","key","p","PhoneDB","useEffect","axios","get","then","res","data","catch","e","console","log","baseURL","newObj","post","id","put","App","setServerNotes","notes","setNotes","newNote","setNewNotes","showAll","setShow","noteToshow","noteService","response","currentNote","changeNote","toggleImportanceOf","noteObj","Math","random","ReactDOM","render","StrictMode","title","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.4e3dc09a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, { useState } from \"react\";\r\nimport \"../index.css\";\r\n\r\nconst ButtonFeedback = (props) => {\r\n  return <button onClick={props.onClick}>{props.text}</button>;\r\n};\r\n\r\nconst StatisticMessage = (props) => {\r\n  const { good, bad, neutral } = props;\r\n  if ((good === 0) & (bad === 0) & (neutral === 0)) {\r\n    return <h2>No feedback Yet!</h2>;\r\n  } else {\r\n    return (\r\n      <div>\r\n        <label>Neutral: {neutral}</label>\r\n        <br></br>\r\n        <label>Bad: {bad}</label>\r\n        <br></br>\r\n        <label>Good: {good}</label>\r\n      </div>\r\n    );\r\n  }\r\n};\r\n\r\nconst Feedback = () => {\r\n  const [good, setStateGood] = useState(0);\r\n  const [bad, setStateBad] = useState(0);\r\n  const [neutral, setStateNeutral] = useState(0);\r\n\r\n  return (\r\n    <div>\r\n      <h2> Give feedback</h2>\r\n      <ButtonFeedback onClick={() => setStateGood(good + 1)} text=\"Good\" />\r\n      <ButtonFeedback onClick={() => setStateBad(bad + 1)} text=\"Bad\" />\r\n      <ButtonFeedback\r\n        onClick={() => setStateNeutral(neutral + 1)}\r\n        text=\"Neutral\"\r\n      />\r\n\r\n      <h2> Statistic</h2>\r\n      <StatisticMessage bad={bad} good={good} neutral={neutral} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Feedback;\r\n","import React, { useState } from \"react\";\r\n// import ReactDom from 'react-dom';\r\n\r\nconst Note = ({ note, toggleImportance  }) => {\r\n\r\n  const lable=note.important? 'make not important': 'make it important'\r\n\r\n\r\n  return (\r\n    <div>\r\n      <li className=\"note\"> {note.content} </li>\r\n      <button onClick={toggleImportance}> {lable}  </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Note;\r\n","import React, { useState } from \"react\";\r\nimport \"./style.css\";\r\n\r\nconst PhoneBook = () => {\r\n  const [persons, setPersons] = useState([\r\n    { name: \"Arto Hellas\", phonenumber: \"040-123456\" },\r\n    { name: \"Ada Lovelace\", phonenumber: \"39-44-5323523\" },\r\n    { name: \"Dan Abramov\", phonenumber: \"12-43-234345\" },\r\n    { name: \"Mary Poppendieck\", phonenumber: \"39-23-6423122\" },\r\n  ]);\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  const [phonenumber, setPhone] = useState([]);\r\n  const [newPhoneNumber, setNewPhone] = useState(\"\");\r\n\r\n  const [searchName, setNewlist] = useState(\"\");\r\n  const [filterPersons, setFilterPersons] = useState([]);\r\n\r\n  const saveName = (event) => {\r\n    event.preventDefault();\r\n    const nameObj = {\r\n      name: newName,\r\n      phonenumber: newPhoneNumber,\r\n    };\r\n    if (persons.find((person) => person.name === newName)) {\r\n      window.alert(`${newName} is already added!`);\r\n      setNewName(\"\");\r\n      setNewPhone(\"\");\r\n    } else {\r\n      setPersons(persons.concat(nameObj));\r\n      // setPhone(phonenumber.concat(newPhoneNumber));\r\n      setNewName(\"\");\r\n      setNewPhone(\"\");\r\n    }\r\n  };\r\n\r\n  const handleChangeName = (event) => {\r\n    setNewName(event.target.value);\r\n  };\r\n\r\n  const handleChangeNumber = (event) => {\r\n    setNewPhone(event.target.value);\r\n  };\r\n\r\n  const findName = (event) => {\r\n    setNewlist(event.target.value);\r\n    \r\n    const result = persons.filter((person) =>\r\n      person.name.toLowerCase().includes(event.target.value.toLowerCase())\r\n    );\r\n    setFilterPersons(result);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <div>\r\n        filter names with <input value={searchName} onChange={findName}></input>\r\n      </div>\r\n      <form onSubmit={saveName}>\r\n        <div>\r\n          name: <input value={newName} onChange={handleChangeName} />\r\n        </div>\r\n        <div>\r\n          number:{\" \"}\r\n          <input value={newPhoneNumber} onChange={handleChangeNumber}></input>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\">add</button>\r\n        </div>\r\n      </form>\r\n      <h2>Numbers</h2>\r\n      <ul>\r\n        {searchName.length < 1\r\n          ? persons.map((person) => (\r\n              <li key={person.name}>\r\n                {person.name} {person.phonenumber}{\" \"}\r\n              </li>\r\n            ))\r\n          : filterPersons.map((p) => (\r\n              <li key={p.name}>\r\n                {\" \"}\r\n                {p.name} {p.phonenumber}{\" \"}\r\n              </li>\r\n            ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PhoneBook;\r\n","import Axios from 'axios'\r\nimport React,{useState, useEffect} from 'react'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\nconst PhoneDB=()=>{\r\n    const [persons, setPersons]=useState([])\r\n\r\n\r\n    useEffect(()=>{\r\n        axios.get('http://localhost:3001/persons').then(res=>{\r\n            // console.log('==================',res.data);\r\n            setPersons(res.data)\r\n        }).catch((e)=>{console.log('--------------------------->',e) })\r\n    },[])\r\n\r\n\r\n    return(<div> \r\n        <h1>Phonebook from JSON DB</h1>\r\n    {persons.map(p=> <div key={p.name}> {p.name} {p.phonenumber}</div>)}\r\n    </div>)\r\n\r\n}\r\n\r\n\r\nexport default PhoneDB\r\n\r\n\r\n","import axios from 'axios'\r\n// const cors = require('cors')\r\n\r\nconst baseURL= 'http://localhost:3001/notes'\r\n\r\n\r\nconst getAll =()=>{\r\n    const request= axios.get(baseURL)\r\n    return request.then(res=> res.data)\r\n\r\n}\r\n\r\nconst create = newObj =>{\r\n    const request=axios.post(baseURL, newObj)\r\n    return request.then(res=>res.data)\r\n}\r\n\r\nconst update=(id,newObj)=>{\r\n    const request=axios.put(`${baseURL}/${id}`, newObj)\r\n    return request.then(res=>res.data)\r\n}\r\n\r\nexport default {\r\n    getAll:getAll,\r\n    create: create,\r\n    update: update\r\n}","import React, { useState, useEffect } from \"react\";\r\nimport logo from \"./logo.svg\";\r\nimport \"./App.css\";\r\nimport Feedback from \"./solution/feedback\";\r\nimport Note from \"./solution/note\";\r\nimport PhoneBook from \"./solution/phonebook\";\r\n// import axios from \"axios\";\r\nimport PhoneDB from './solution/phonebookDb'\r\nimport noteService from './services/notes'\r\n// import { Route, BrowserRouter as Router, Switch,Link } from 'react-router-dom';\r\n\r\nconst App = (props) => {\r\n  \r\n  const [serverNote, setServerNotes]=useState([])\r\n\r\n  const [notes, setNotes] = useState(props.notes);\r\n  const [newNote, setNewNotes] = useState(\"To do list...\");\r\n  const [showAll, setShow] = useState(true);\r\n\r\n  const noteToshow = showAll ? notes : notes.filter((note) => note.important);\r\n\r\n  const handleNewNote = (event) => {\r\n    setNewNotes(event.target.value);\r\n  };\r\n\r\n  //controlled components\r\n  const addNote = (event) => {\r\n    \r\n    event.preventDefault();\r\n    const noteObj = {\r\n      content: newNote,\r\n      important: Math.random() < 0.5,\r\n      id: notes.length + 1,\r\n    }\r\n    noteService.create(noteObj)\r\n    .then(response=>{\r\n      setNotes(notes.concat(response))\r\n      setNewNotes(\"\")\r\n    })\r\n    // axios.post('http://localhost:3001/notes', noteObj)\r\n    // .then(response=>{\r\n    //   // console.log(response);\r\n    //   setNotes(notes.concat(response.data));\r\n    //   setNewNotes(\"\");\r\n    // })\r\n  }\r\n\r\n  const toggleImportanceOf=(id)=>{\r\n    // console.log(`importanc of ${id} need to be toggled`);\r\n    // const currentUrl=`http://localhost:3001/notes/${id}`\r\n    const currentNote= notes.find(note=>note.id=== id )\r\n    const changeNote={...currentNote, important: !currentNote.important }\r\n    noteService.update(id,changeNote )\r\n    .then(response=>{\r\n      setNotes(notes.map(note=> note.id === id ? response: note))\r\n    })\r\n\r\n    // axios.put(currentUrl, changeNote)\r\n    // .then(res=>{\r\n    //   setNotes(notes.map(note=>note.id===id? res.data: note  ))\r\n    // })\r\n  }  \r\n\r\n\r\n  useEffect(()=>{\r\n    noteService.getAll().then(response=> {\r\n      setServerNotes(response)\r\n    })\r\n  }\r\n  ,[])    \r\n\r\n  //   axios.get('http://localhost:3001/notes').then(res=>{\r\n  //     console.log('--------------', res.data);\r\n  //     setServerNotes(res.data)\r\n  //   })\r\n  // }, [])\r\n  \r\n  \r\n  return (\r\n    <div>\r\n      {/* ========Feeback======= */}\r\n      <div>\r\n        <Feedback />\r\n      </div>\r\n      {/* ========To do======= */}\r\n      <div>\r\n        <ul>\r\n          {noteToshow.map((note) => (\r\n            <Note key={note.id} note={note}  toggleImportance={ ()=> toggleImportanceOf(note.id) } />\r\n          ))}\r\n        </ul>\r\n        {/* <Note props={notes} /> */}\r\n        <form onSubmit={addNote}>\r\n          <input value={newNote} onChange={handleNewNote} />\r\n          <button type=\"submit\">Save</button>\r\n        </form>\r\n        <div>\r\n          <button onClick={() => setShow(!showAll)}>\r\n            Show {showAll ? \"important\" : \"all\"}\r\n          </button>\r\n        </div>\r\n      </div>\r\n      {/* ========Phonebook======= */}\r\n      <div>\r\n        <PhoneBook />\r\n      </div>\r\n      <div>\r\n            <PhoneDB/>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n\r\n\r\n\r\n// =======================================================================\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n      <nav>\r\n      <ul>\r\n\r\n      <li>\r\n        <Link to=\"/feedback\">Feedback</Link>\r\n      </li>\r\n    </ul>\r\n      </nav>\r\n    <Switch>\r\n        <Route path='/feedback.js'>\r\n        <Feedback/>\r\n      </Route>\r\n    </Switch>\r\n      </div>\r\n  </Router>\r\n)\r\n}\r\n\r\nfunction Feedback(){\r\nreturn <h2>feedback</h2>\r\n}\r\n\r\n*/\r\n","// \"start\": \"react-scripts start\",\r\n\r\n\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Feedback from './solution/feedback'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App'\r\nimport axios from 'axios'\r\n\r\n\r\n\r\n\r\n// const promise = axios.get('http://localhost:3001/notes')\r\n// promise.then(res=>\r\n//     console.log(res)\r\n// )\r\n\r\n\r\n// axios\r\n//     .get('http://localhost:3001/notes')\r\n//     .then(res=>{\r\n//     const notes=res.data\r\n//     console.log(notes)\r\n// })\r\n\r\n// const promise2= axios.get('http://localhost:3001/foobar')\r\n// console.log(promise2);\r\n\r\n\r\nconst notes=[{\r\n    id:1,\r\n    title:'Person 1 feedback',\r\n    content:'This feedback system must be improved!'\r\n},\r\n{\r\n    id:2,\r\n    title:'Person 2 feedback',\r\n    content:'This feedback system must be better!'\r\n},\r\n{\r\n    id:3,\r\n    title:'Person 3 feedback',\r\n    content:'This feedback system must be modified!'\r\n}\r\n]\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App notes={notes}/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}