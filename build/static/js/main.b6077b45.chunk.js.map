{"version":3,"sources":["logo.svg","serviceWorker.js","solution/feedback.js","App.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","ButtonFeedback","props","onClick","text","StatisticMessage","console","log","good","bad","neutral","Feedback","useState","setStateGood","setStateBad","setStateNeutral","App","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"wHAAAA,EAAOC,QAAU,IAA0B,kC,4GCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,sBCfAC,G,MAAe,SAACC,GACtB,OAAO,4BAAQC,QAASD,EAAMC,SAAUD,EAAME,QAIxCC,EAAiB,SAACH,GAEpBI,QAAQC,IAAIL,GAFgB,IAGrBM,EAAoBN,EAApBM,KAAMC,EAAcP,EAAdO,IAAKC,EAASR,EAATQ,QAGlB,OADAJ,QAAQC,IAAIL,EAAMM,KAAMC,EAAKC,GACjB,IAAPF,EAAe,IAANC,EAAkB,IAAVC,EACd,gDAIP,6BACI,2CAAiBA,GAAgB,6BACjC,uCAAaD,GAAY,6BACzB,wCAAcD,KA2BRG,EApBI,WAAK,IAAD,EACYC,mBAAS,GADrB,mBACRJ,EADQ,KACFK,EADE,OAEUD,mBAAS,GAFnB,mBAERH,EAFQ,KAEHK,EAFG,OAGkBF,mBAAS,GAH3B,mBAGRF,EAHQ,KAGCK,EAHD,KAKnB,OACA,6BACE,8CACA,kBAAC,EAAD,CAAgBZ,QAAS,kBAAIU,EAAaL,EAAK,IAAKJ,KAAK,SACzD,kBAAC,EAAD,CAAgBD,QAAS,kBAAIW,EAAYL,EAAI,IAAKL,KAAK,QACvD,kBAAC,EAAD,CAAgBD,QAAS,kBAAIY,EAAgBL,EAAQ,IAAKN,KAAK,YAE/D,0CACA,kBAAE,EAAF,CAAmBK,IAAKA,EAAKD,KAAMA,EAAOE,QAAUA,MCzB3CM,EARJ,WACT,OACE,6BACE,kBAAC,EAAD,QCJNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SHuHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvB,QAAQuB,MAAMA,EAAMC,c","file":"static/js/main.b6077b45.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.ee7cd8ed.svg\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React, {useState} from 'react';\r\nimport '../index.css';\r\n\r\nconst ButtonFeedback=(props)=>{\r\nreturn <button onClick={props.onClick}>{props.text}</button>\r\n}\r\n\r\n\r\nconst StatisticMessage=(props)=>{\r\n    \r\n    console.log(props);\r\n    const {good, bad, neutral}=props\r\n    \r\n    console.log(props.good, bad, neutral);\r\n    if ( good===0&bad===0&neutral===0) {\r\n    return (<h2>No feedback Yet!</h2>)\r\n}\r\nelse {\r\n  return (\r\n     <div>\r\n         <label>Neutral: {neutral}</label><br></br>\r\n         <label>Bad: {bad}</label><br></br>\r\n         <label>Good: {good}</label>\r\n     </div>\r\n \r\n     )\r\n     }\r\n }\r\n\r\n    const Feedback=()=>{\r\n        const [good, setStateGood]=useState(0)\r\n        const [bad, setStateBad]=useState(0)\r\n        const [neutral, setStateNeutral]=useState(0)\r\n\r\n    return (\r\n    <div>\r\n      <h2> Give feedback</h2>\r\n      <ButtonFeedback onClick={()=>setStateGood(good+1)}  text=\"Good\"/>\r\n      <ButtonFeedback onClick={()=>setStateBad(bad+1)}  text=\"Bad\"/>\r\n      <ButtonFeedback onClick={()=>setStateNeutral(neutral+1)}  text=\"Neutral\"/>\r\n\r\n      <h2> Statistic</h2>\r\n      < StatisticMessage bad={bad} good={good}  neutral ={neutral}/>\r\n    </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Feedback;","import React from 'react';\r\nimport logo from './logo.svg';\r\nimport './App.css';\r\nimport Feedback from './solution/feedback';\r\n// import { Route, BrowserRouter as Router, Switch,Link } from 'react-router-dom';\r\n\r\n\r\n\r\n\r\nconst  App=()=>{\r\n  return (\r\n    <div>\r\n      <Feedback/>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default App;\r\n\r\n\r\n// function App() {\r\n//   return (\r\n//     <div className=\"App\">\r\n//       <header className=\"App-header\">\r\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n//         <p>\r\n//           Edit <code>src/App.js</code> and save to reload.\r\n//         </p>\r\n//         <a\r\n//           className=\"App-link\"\r\n//           href=\"https://reactjs.org\"\r\n//           target=\"_blank\"\r\n//           rel=\"noopener noreferrer\"\r\n//         >\r\n//           Learn React\r\n//         </a>\r\n//       </header>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n\r\n\r\n/*\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <div>\r\n      <nav>\r\n      <ul>\r\n\r\n      <li>\r\n        <Link to=\"/feedback\">Feedback</Link>\r\n      </li>\r\n    </ul>\r\n      </nav>\r\n    <Switch>\r\n        <Route path='/feedback.js'>\r\n        <Feedback/>\r\n      </Route>\r\n    </Switch>\r\n      </div>\r\n  </Router>\r\n)\r\n}\r\n\r\nfunction Feedback(){\r\nreturn <h2>feedback</h2>\r\n}\r\n\r\n*/\r\n\r\n\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\n// import Feedback from './solution/feedback'\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './App'\r\n\r\n\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n)\r\n\r\nserviceWorker.unregister();"],"sourceRoot":""}