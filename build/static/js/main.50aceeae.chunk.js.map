{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","marr","destruct","map","val","concat","App4","useState","left","right","all","click","setState","onClick","newVal","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oFAAAA,EAAOC,QAAU,IAA0B,kC,gLCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCNN,IAiDMC,EAAK,CAAC,EAAE,EAAE,GAeVC,GAdMD,EAAKE,KAAI,SAAAC,GAAG,OAAM,EAAJA,KAQf,CAAC,EAAE,GAEEC,OADL,CAAC,EAAE,IAKC,CAAC,EAAE,EAAE,EAAE,GAAG,KAmJnBC,GAlJiBJ,E,GAAAA,E,GAAAA,E,SAkJZ,WAAK,IAAD,EACWK,mBAAS,CAACC,KAAK,EAAGC,MAAM,EAAGC,IAAI,IAD1C,mBACNC,EADM,KACCC,EADD,KA4Bb,OACE,6BACGD,EAAMH,KACP,4BAAQK,QA3BI,WACd,IAAMC,EAAO,2BACRH,GADO,IAEVH,KAAKG,EAAMH,KAAK,IAElBI,EAASE,KAsBP,QACA,4BAAQD,QApBK,WACf,IAAMC,EAAO,2BACRH,GADO,IAEVF,MAAME,EAAMF,MAAM,IAEpBG,EAASE,KAeP,SACCH,EAAMF,MACP,4BAAQI,QAdG,WACb,IAAMC,EAAO,2BACRH,GADO,IAEVD,IAAIC,EAAMH,KAAMG,EAAMF,QAExBG,EAASE,KASP,OACCH,EAAMD,OAcbK,IAASC,OACT,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDjJpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.50aceeae.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { useEffect, useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n//**************************************************************************************************************\n// 2 ways to define function\n// 1st fucntion declaration\nfunction dec(){\n  return null\n}\n// 2nd function expression\nconst exp=function(){\n  return null\n}\n// storing a method reference in a variable \n// ** calling the method through a reference, the method loses knowledge of what was the original this\n// ** When calling the method through a reference the value of this becomes the so-called global object\n// https://fullstackopen.com/en/part1/java_script#functions\nconst referenceToFun=exp\n\n// object -- Object literals\nconst firstObj={\n  code:'js',\n  version:10,\n  otherCode:{\n    backend:'nodejs',\n    framework:'react'\n  }\n}\n// add properties to the object\n// firstObj.otherCode.framework['angular']\n\n\nconst FindName=(pp)=>{\n  return(\n  <p>My name is {pp.name} and I'm {pp.age} years old!</p>\n  )\n}\n\n//**************************************************************************************************************\n\nconst Myapp=()=>{\n  // console.log(\"something\")\n  // const now=new Date();\n  \n  return(\n    // <div>\n    <>\n    <p>\n    <Hello/>  \n      customer name.\n    </p>\n    <FindName name='HGH' age='34'/>\n    <MapList/>\n    </>\n  // </div>\n  )\n}\n//**************************************************************************************************************\n// map \nconst marr=[1,2,3]\nconst nmarr=marr.map(val=>val*2)\n// console.log(nmarr)\nconst MapList=()=>{\n  return (marr.map(value => <li>  {value}  </li>)\n  )\n}\n//**************************************************************************************************************\n//concat array\nconst farr=[1,2]\nconst sarr=[3,4]\nconst tarr=farr.concat(sarr)\n// console.log('concat is '+tarr)\n//**************************************************************************************************************\n// destructuring assignment \nconst destruct=[1,2,3,40,50]\nconst [f,s, ...restof]=destruct\n// console.log(f,s)\n// console.log(restof)\n\n\n//**************************************************************************************************************\nconst Hello=(prop)=>{\n  const {name , age}=prop\n  return(\n    <div>\n    <p>\n      Hello {name} you are {age}\n    </p>\n  </div>\n  )\n}\n\n\n\nconst R=(p)=>{\n  const {r}=p\n  return(\n    <div> {r} </div>\n  )\n}\n\nlet rr = 123\n\nconst Application=()=>{\n  const name='hgh'\n  const age=34\n  return(\n    <div>\n      <Hello name='hgh2' age={35} />\n      <Hello name={name} age={age}/>\n    </div>\n  )\n}\n\n// const refresh=()=>ReactDOM.render(\n//   <React.StrictMode>\n//     <R r={rr} />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// setInterval((callback)=>{\n//   refresh()\n//   rr+=10\n// },1000)\n\n//**************************************************************************************************************\nconst TestState=()=>{\n  const [count, setCount]=useState(0);\n  return(\n   <div>\n     <p>\n     you click {count} times \n      </p>\n      <button onClick={()=>setCount(count+1)} >\n        click me\n      </button>\n      <button onClick={()=>console.log('clicked')}>C</button>\n   </div> \n  )\n}\n\n//**************************************************************************************************************\nconst App1=()=>{\n  const [c, s]=useState(1000)\n  setTimeout(()=>s(c+1),1000)\n  console.log(c);\nreturn <div>{c}</div>\n}\n//**************************************************************************************************************\nconst Display = (props) => {\n  return (\n    <div>{props.counter}</div>\n  )\n}\n\n\nconst Button = ({handleClick, text}) => {\n  return (\n    <button onClick={handleClick}>\n      {text}\n    </button>\n  )\n}\n\nconst App2 = () => {\n  const [ counter, setCounter ] = useState(0)\n\n  const increaseByOne = () => setCounter(counter + 1)\n  const decreaseByOne = () => setCounter(counter - 1)\n  const setToZero = () => setCounter(0)\n\n  return (\n    <div>\n      <Display counter={counter}/>\n      <Button\n        handleClick={increaseByOne}\n        text='plus'\n      />\n      <Button\n        handleClick={setToZero}\n        text='zero'\n      />     \n      <Button\n        handleClick={decreaseByOne}\n        text='minus'\n      />           \n    </div>\n  )\n}\n\n//**************************************************************************************************************\n\nconst Disp=({val})=>{\n  return <div>{val}</div>\n}\n\nconst Btn=({clk, txt})=>{\n  return <button onClick={clk}>{txt}</button>\n}\n\nconst App3=()=>{\n  const [a,setC]=useState(0)\n\n  const add=()=> setC( a+1)\n  const min=()=>  setC( a-1)\n  const res=()=> setC( 0)\n  return(\n    <div>\n\n      <Disp val={a}/>\n      <Btn clk={add} txt='+' />\n      <Btn clk={min} txt='-'/>\n      <Btn clk={res} txt='reset'/>\n    </div>\n\n  )\n}\n//**************************************************************************************************************\n// Complex state: Object spread example \n\nconst App4=()=>{\n  const [click, setState]=useState({left:0, right:0, all:0});\n\n\n  const clickLeft=()=>{\n    const newVal={\n      ...click,\n      left:click.left+1\n    }\n    setState(newVal)\n  }\n\n  const clickRight=()=>{\n    const newVal={\n      ...click,\n      right:click.right+1\n    }\n    setState(newVal)\n  }\n  // One way of saving all clicks Left&Right\n  const clickAll=()=>{\n    const newVal={\n      ...click,\n      all:click.left+ click.right\n    }\n    setState(newVal)\n  }\n  \n  return(\n    <div>\n      {click.left}\n      <button onClick={clickLeft}>left</button>\n      <button onClick={clickRight}>right</button>\n      {click.right}\n      <button onClick={clickAll}>ALL</button>\n      {click.all}\n    </div>\n  )\n}\n//**************************************************************************************************************\n// debugging by cmd OR source tab in dev tool chrome \n// * pause the execution \ndebugger;\n\n//**************************************************************************************************************\n// rules of hooks. To ensure that our application uses hooks-based state functions correctly:\n// useState useEffect must not be called from inside of a loop, a conditional expression, or any place that is not a function defining a component.\n\n//**************************************************************************************************************\nReactDOM.render(\n<React.StrictMode>\n    <App4/>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}